# -*- coding: utf-8 -*-
"""análise e planejamento estratégico

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iSguXLuE43YrESeXAtJGNORkhpfWV0y1
"""

!pip install scikit-learn

!pip install pandas matplotlib seaborn scikit-learn openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(42)
data = pd.DataFrame({
    "Canais": np.random.choice(["Redes Sociais", "E-mail Marketing", "Chatbots", "Suporte ao Cliente"], 500),
    "Automacao": np.random.uniform(0, 1, 500),
    "Personalizacao": np.random.uniform(0.2, 0.9, 500),
    "Engajamento": np.random.uniform(100, 1000, 500),
    "Tempo_Resposta": np.random.uniform(1, 10, 500),
    "Taxa_Conversao": np.random.uniform(0.1, 0.5, 500)
})

data["ROI"] = (data["Engajamento"] * data["Taxa_Conversao"] / data["Tempo_Resposta"]) * data["Automacao"]


print("Resumo dos dados:")
print(data.describe())


sns.set_theme(style="whitegrid")
plt.figure(figsize=(12, 6))
sns.boxplot(x="Canais", y="ROI", data=data, palette="muted", dodge=False)
plt.title("Impacto da IA nos Diferentes Canais de Comunicação")
plt.ylabel("ROI (Retorno sobre Investimento)")
plt.show()


X = data[["Automacao", "Personalizacao", "Engajamento", "Tempo_Resposta", "Taxa_Conversao"]]
y = data["ROI"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, random_state=42)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)
print("Avaliação do Modelo:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.4f}")
print(f"R2 Score: {r2_score(y_test, y_pred):.4f}")


importances = model.feature_importances_
feature_names = X.columns
sorted_idx = np.argsort(importances)

plt.figure(figsize=(10, 6))
plt.barh(range(len(sorted_idx)), importances[sorted_idx], align="center")
plt.yticks(range(len(sorted_idx)), [feature_names[i] for i in sorted_idx])
plt.title("Importância das Features para ROI")
plt.xlabel("Importância Relativa")
plt.show()


def recomendar_estrategias(row):
    if row["Automacao"] > 0.7 and row["Personalizacao"] > 0.7:
        return "Foco em Chatbots e Campanhas Personalizadas"
    elif row["Automacao"] > 0.5:
        return "Automação de E-mails e Respostas Rápidas"
    else:
        return "Investir em Personalização e Análise de Dados"